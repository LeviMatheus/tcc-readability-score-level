
The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other; thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general "n" queens problem of placing "n" non-attacking queens on an "n"×"n" chessboard, for which solutions exist for all natural numbers "n" with the exception of "n" = 2 and "n" = 3.
History.
Chess composer Max Bezzel published the eight queens puzzle in 1848. Franz Nauck published the first solutions in 1850. Nauck also extended the puzzle to the "n" queens problem, with "n" queens on a chessboard of "n"×"n" squares.
Since then, many mathematicians, including Carl Friedrich Gauss, have worked on both the eight queens puzzle and its generalized "n"-queens version. In 1874, S. Gunther proposed a method using determinants to find solutions. J.W.L. Glaisher refined Gunther's approach.
In 1972, Edsger Dijkstra used this problem to illustrate the power of what he called structured programming. He published a highly detailed description of a depth-first backtracking algorithm.2
Constructing and counting solutions.
The problem of finding all solutions to the 8-queens problem can be quite computationally expensive, as there are 4,426,165,368 (i.e., 64C8) possible arrangements of eight queens on an 8×8 board, but only 92 solutions. It is possible to use shortcuts that reduce computational requirements or rules of thumb that avoids brute-force computational techniques. For example, by applying a simple rule that constrains each queen to a single column (or row), though still considered brute force, it is possible to reduce the number of possibilities to 16,777,216 (that is, 88) possible combinations. Generating permutations further reduces the possibilities to just 40,320 (that is, 8!), which are then checked for diagonal attacks.
Solutions.
The eight queens puzzle has 92 distinct solutions. If solutions that differ only by the symmetry operations of rotation and reflection of the board are counted as one, the puzzle has 12 solutions. These are called "fundamental" solutions; representatives of each are shown below.
A fundamental solution usually has eight variants (including its original form) obtained by rotating 90, 180, or 270° and then reflecting each of the four rotational variants in a mirror in a fixed position. However, should a solution be equivalent to its own 90° rotation (as happens to one solution with five queens on a 5×5 board), that fundamental solution will have only two variants (itself and its reflection). Should a solution be equivalent to its own 180° rotation (but not to its 90° rotation), it will have four variants (itself and its reflection, its 90° rotation and the reflection of that). If "n" &gt; 1, it is not possible for a solution to be equivalent to its own reflection because that would require two queens to be facing each other. Of the 12 fundamental solutions to the problem with eight queens on an 8×8 board, exactly one (solution 12 below) is equal to its own 180° rotation, and none is equal to its 90° rotation; thus, the number of distinct solutions is 11×8 + 1×4 = 92.
All fundamental solutions are presented below:
Solution 10 has the additional property that no three queens are in a straight line. Solutions 1 and 8 have a 4-queen line.
Existence of solutions.
These brute-force algorithms to count the number of solutions are computationally manageable for , but would be intractable for problems of , as 20! = 2.433 × 1018. If the goal is to find a single solution, one can show solutions exist for all "n" ≥ 4 with no search whatsoever.
These solutions exhibit stair-stepped patterns, as in the following examples for "n" = 8, 9 and 10:
The examples above can be obtained with the following formulas. Let ("i", "j") be the square in column "i" and row "j" on the "n" × "n" chessboard, "k" an integer.
One approach is
For this results in fundamental solution 1 above. A few more examples follow.
Counting solutions.
The following tables give the number of solutions for placing "n" queens on an board, both fundamental and all .
The six queens puzzle has fewer solutions than the five queens puzzle.
There is no known formula for the exact number of solutions, or even for its asymptotic behaviour. The 27×27 board is the highest-order board that has been completely enumerated.
Exercise in algorithm design.
Finding all solutions to the eight queens puzzle is a good example of a simple but nontrivial problem. For this reason, it is often used as an example problem for various programming techniques, including nontraditional approaches such as constraint programming, logic programming or genetic algorithms. Most often, it is used as an example of a problem that can be solved with a recursive algorithm, by phrasing the "n" queens problem inductively in terms of adding a single queen to any solution to the problem of placing "n"−1 queens on an "n"×"n" chessboard. The induction bottoms out with the solution to the 'problem' of placing 0 queens on the chessboard, which is the empty chessboard.
This technique can be used in a way that is much more efficient than the naïve brute-force search algorithm, which considers all 648 = 248 = 281,474,976,710,656 possible blind placements of eight queens, and then filters these to remove all placements that place two queens either on the same square (leaving only 64!/56! = 178,462,987,637,760 possible placements) or in mutually attacking positions. This very poor algorithm will, among other things, produce the same results over and over again in all the different permutations of the assignments of the eight queens, as well as repeating the same computations over and over again for the different sub-sets of each solution. A better brute-force algorithm places a single queen on each row, leading to only 88 = 224 = 16,777,216 blind placements.
It is possible to do much better than this.
One algorithm solves the eight rooks puzzle by generating the permutations of the numbers 1 through 8 (of which there are 8! = 40,320), and uses the elements of each permutation as indices to place a queen on each row.
Then it rejects those boards with diagonal attacking positions.
The backtracking depth-first search program, a slight improvement on the permutation method, constructs the search tree by considering one row of the board at a time, eliminating most nonsolution board positions at a very early stage in their construction.
Because it rejects rook and diagonal attacks even on incomplete boards, it examines only 15,720 possible queen placements.
A further improvement, which examines only 5,508 possible queen
placements, is to combine the permutation based method with the early
pruning method: the permutations are generated depth-first, and
the search space is pruned if the partial permutation produces a
diagonal attack.
Constraint programming can also be very effective on this problem.
An alternative to exhaustive search is an 'iterative repair' algorithm, which typically starts with all queens on the board, for example with one queen per column. It then counts the number of conflicts (attacks), and uses a heuristic to determine how to improve the placement of the queens. The 'minimum-conflicts' heuristic – moving the piece with the largest number of conflicts to the square in the same column where the number of conflicts is smallest – is particularly effective: it finds a solution to the 1,000,000 queen problem in less than 50 steps on average. This assumes that the initial configuration is 'reasonably good' – if a million queens all start in the same row, it will take at least 999,999 steps to fix it. A 'reasonably good' starting point can for instance be found by putting each queen in its own row and column so that it conflicts with the smallest number of queens already on the board.
Unlike the backtracking search outlined above, iterative repair does not guarantee a solution: like all greedy procedures, it may get stuck on a local optimum. (In such a case, the algorithm may be restarted with a different initial configuration.) On the other hand, it can solve problem sizes that are several orders of magnitude beyond the scope of a depth-first search.
This animation illustrates backtracking to solve the problem. A queen is placed in a column that is known not to cause conflict. If a column is not found the program returns to the last good state and then tries a different column.
As an alternative to backtracking, solutions can be counted by recursively enumerating valid partial solutions, one row at a time. Rather than constructing entire board positions, blocked diagonals and columns are tracked with bitwise operations. This does not allow the recovery of individual solutions.
Sample program.
The following is a Pascal program by Niklaus Wirth in 1976. It finds one solution to the eight queens problem.
program eightqueen1(output);
var i : integer; q : boolean;
 a : array[ 1 .. 8] of boolean;
 b : array[ 2 .. 16] of boolean;
 c : array[ −7 .. 7] of boolean;
 x : array[ 1 .. 8] of integer;
procedure try( i : integer; var q : boolean);
 var j : integer;
 begin 
 j := 0;
 repeat 
 j := j + 1; 
 q := false;
 if a[ j] and b[ i + j] and c[ i − j] then
 begin 
 x[ i ] := j;
 a[ j ] := false; 
 b[ i + j] := false; 
 c[ i − j] := false;
 if i &lt; 8 then
 begin
 try( i + 1, q);
 if not q then
 begin 
 a[ j] := true; 
 b[ i + j] := true; 
 c[ i − j] := true;
 end
 end 
 else 
 q := true
 end
 until q or (j = 8);
 end;
begin
for i := 1 to 8 do a[ i] := true;
for i := 2 to 16 do b[ i] := true;
for i := −7 to 7 do c[ i] := true;
try( 1, q);
if q then
 for i := 1 to 8 do write( x[ i]:4);
writeln
end.
In popular culture.
In the game "The 7th Guest", the 8th Puzzle: "The Queen's Dilemma" in the game room of the Stauf mansion is the de facto eight queens puzzle.

