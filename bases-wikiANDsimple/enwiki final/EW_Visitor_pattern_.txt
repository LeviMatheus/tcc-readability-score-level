
In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying the structures. It is one way to follow the open/closed principle.
In essence, the visitor allows adding new virtual functions to a family of classes, without modifying the classes. Instead, a visitor class is created that implements all of the appropriate specializations of the virtual function. The visitor takes the instance reference as input, and implements the goal through double dispatch.
Overview.
The Visitor 
design pattern is one of the twenty-three well-known "GoF design patterns" 
that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, 
objects that are easier to implement, change, test, and reuse.
When new operations are needed frequently and the object structure consists of many unrelated classes,
it's inflexible to add new subclasses each time a new operation is required
because "[..] distributing all these operations across the various node classes leads to a system that's hard to understand, maintain, and change." 
This makes it possible to create new operations independently from the classes of an object structure
by adding new visitor objects.
See also the UML class and sequence diagram below.
Definition.
The Gang of Four defines the Visitor as:
The nature of the Visitor makes it an ideal pattern to plug into public APIs, thus allowing its clients to perform operations on a class using a "visiting" class without having to modify the source.
Uses.
Moving operations into visitor classes is beneficial when
A drawback to this pattern, however, is that it makes extensions to the class hierarchy more difficult, as new classes typically require a new codice_1 method to be added to each visitor.
Use case example.
Consider the design of a 2D computer-aided design (CAD) system. At its core, there are several types to represent basic geometric shapes like circles, lines, and arcs. The entities are ordered into layers, and at the top of the type hierarchy is the drawing, which is simply a list of layers, plus some added properties.
A fundamental operation on this type hierarchy is saving a drawing to the system's native file format. At first glance, it may seem acceptable to add local save methods to all types in the hierarchy. But it is also useful to be able to save drawings to other file formats. Adding ever more methods for saving into many different file formats soon clutters the relatively pure original geometric data structure.
A naive way to solve this would be to maintain separate functions for each file format. Such a save function would take a drawing as input, traverse it, and encode into that specific file format. As this is done for each added different format, duplication between the functions accumulates. For example, saving a circle shape in a raster format requires very similar code no matter what specific raster form is used, and is different from other primitive shapes. The case for other primitive shapes like lines and polygons is similar. Thus, the code becomes a large outer loop traversing through the objects, with a large decision tree inside the loop querying the type of the object. Another problem with this approach is that it is very easy to miss a shape in one or more savers, or a new primitive shape is introduced, but the save routine is implemented only for one file type and not others, leading to code extension and maintenance problems.
Instead, the visitor pattern can be applied. It encodes a logical operation on the whole hierarchy into one class containing one method per type. In the CAD example, each save function would be implemented as a separate Visitor subclass. This would remove all duplication of type checks and traversal steps. It would also make the compiler complain if a shape is omitted.
Another motive is to reuse iteration code. For example, iterating over a directory structure could be implemented with a visitor pattern. This would allow creating file searches, file backups, directory removal, etc., by implementing a visitor for each function while reusing the iteration code.
Structure.
UML class and sequence diagram.
In the above UML class diagram, the codice_2 class doesn't implement a new operation directly.
Instead, codice_2 implements a "dispatching operation" codice_4 that "dispatches" (delegates) a request to the "accepted visitor object" (codice_5). The codice_6 class implements the operation (codice_7).
&lt;br&gt;
codice_8 then implements codice_4 by dispatching to codice_10. The codice_6 class implements the operation (codice_12).
The UML sequence diagram
shows the run-time interactions: The codice_13 object traverses the elements of an object structure (codice_14) and calls codice_4 on each element.
&lt;br&gt;
First, the codice_13 calls codice_4 on
codice_2, which calls codice_19 on the accepted codice_20 object.
The element itself (codice_21) is passed to the codice_20 so that 
it can "visit" codice_2 (call codice_24).
&lt;br&gt;
Thereafter, the codice_13 calls codice_4 on
codice_8, which calls codice_28 on the codice_20 that "visits" codice_8 (calls codice_31).
Details.
The visitor pattern requires a programming language that supports single dispatch, as common object-oriented languages (such as C++, Java, Smalltalk, Objective-C, Swift, JavaScript, Python and C#) do. Under this condition, consider two objects, each of some class type; one is termed the "element", and the other is "visitor".
The "visitor" declares a codice_1 method, which takes the element as an argument, for each class of element. "Concrete visitors" are derived from the visitor class and implement these codice_1 methods, each of which implements part of the algorithm operating on the object structure. The state of the algorithm is maintained locally by the concrete visitor class.
The "element" declares an codice_34 method to accept a visitor, taking the visitor as an argument. "Concrete elements", derived from the element class, implement the codice_34 method. In its simplest form, this is no more than a call to the visitor's codice_1 method. Composite elements, which maintain a list of child objects, typically iterate over these, calling each child's codice_34 method.
The "client" creates the object structure, directly or indirectly, and instantiates the concrete visitors. When an operation is to be performed which is implemented using the Visitor pattern, it calls the codice_34 method of the top-level element(s).
When the codice_34 method is called in the program, its implementation is chosen based on both the dynamic type of the element and the static type of the visitor. When the associated codice_1 method is called, its implementation is chosen based on both the dynamic type of the visitor and the static type of the element, as known from within the implementation of the codice_34 method, which is the same as the dynamic type of the element. (As a bonus, if the visitor can't handle an argument of the given element's type, then the compiler will catch the error.)
Thus, the implementation of the codice_1 method is chosen based on both the dynamic type of the element and the dynamic type of the visitor. This effectively implements double dispatch. For languages whose object systems support multiple dispatch, not only single dispatch, such as Common Lisp or C# via the Dynamic Language Runtime (DLR), implementation of the visitor pattern is greatly simplified (a.k.a. Dynamic Visitor) by allowing use of simple function overloading to cover all the cases being visited. A dynamic visitor, provided it operates on public data only, conforms to the open/closed principle (since it does not modify extant structures) and to the single responsibility principle (since it implements the Visitor pattern in a separate component).
In this way, one algorithm can be written to traverse a graph of elements, and many different kinds of operations can be performed during that traversal by supplying different kinds of visitors to interact with the elements based on the dynamic types of both the elements and the visitors.
C# example.
This example declares a separate codice_43 class that takes care of the printing.
namespace Wikipedia
 public class ExpressionPrintingVisitor
 public void PrintLiteral(Literal literal)
 Console.WriteLine(literal.Value);
 
 public void PrintAddition(Addition addition)
 double leftValue = addition.Left.GetValue();
 double rightValue = addition.Right.GetValue();
 var sum = addition.GetValue();
 Console.WriteLine("{0} + {1} = {2}", leftValue, rightValue, sum);
 public abstract class Expression
 public abstract void Accept(ExpressionPrintingVisitor v);
 public abstract double GetValue();
 public class Literal : Expression
 public Literal(double value)
 this.Value = value;
 
 public override void Accept(ExpressionPrintingVisitor v)
 v.PrintLiteral(this);
 
 public override double GetValue()
 return Value;
 public class Addition : Expression
 public Addition(Expression left, Expression right)
 Left = left;
 Right = right;
 
 public override void Accept(ExpressionPrintingVisitor v)
 v.PrintAddition(this);
 
 public override double GetValue()
 return Left.GetValue() + Right.GetValue(); 
 public static class Program
 public static void Main(string[] args)
 // Emulate 1 + 2 + 3
 var e = new Addition(
 new Addition(
 new Literal(1),
 new Literal(2)
 new Literal(3)
 
 var printingVisitor = new ExpressionPrintingVisitor();
 e.Accept(printingVisitor);
Smalltalk example.
In this case, it is the object's responsibility to know how to print itself on a stream. The visitor here is then the object, not the stream.
"There's no syntax for creating a class. Classes are created by sending messages to other classes."
WriteStream subclass: #ExpressionPrinter
 instanceVariableNames: "
 classVariableNames: "
 package: 'Wikipedia'.
ExpressionPrinter»write: anObject
 "Delegates the action to the object. The object doesn't need to be of any special
 class; it only needs to be able to understand the message #putOn:"
 anObject putOn: self.
 ^ anObject.
Object subclass: #Expression
 instanceVariableNames: "
 classVariableNames: "
 package: 'Wikipedia'.
Expression subclass: #Literal
 instanceVariableNames: 'value'
 classVariableNames: "
 package: 'Wikipedia'.
Literal class»with: aValue
 "Class method for building an instance of the Literal class"
 ^ self new
 value: aValue;
 yourself.
Literal»value: aValue
 "Setter for value"
 value := aValue.
Literal»putOn: aStream
 "A Literal object knows how to print itself"
 aStream nextPutAll: value asString.
Expression subclass: #Addition
 instanceVariableNames: 'left right'
 classVariableNames: "
 package: 'Wikipedia'.
Addition class»left: a right: b
 "Class method for building an instance of the Addition class"
 ^ self new
 left: a;
 right: b;
 yourself.
Addition»left: anExpression
 "Setter for left"
 left := anExpression.
Addition»right: anExpression
 "Setter for right"
 right := anExpression.
Addition»putOn: aStream
 "An Addition object knows how to print itself"
 aStream nextPut: $(.
 left putOn: aStream.
 aStream nextPut: $+.
 right putOn: aStream.
 aStream nextPut: $).
Object subclass: #Program
 instanceVariableNames: "
 classVariableNames: "
 package: 'Wikipedia'.
Program»main
 | expression stream |
 expression := Addition
 left: (Addition
 left: (Literal with: 1)
 right: (Literal with: 2))
 right: (Literal with: 3).
 stream := ExpressionPrinter on: (String new: 100).
 stream write: expression.
 Transcript show: stream contents.
 Transcript flush.
C++ example.
Sources.
class AbstractDispatcher; // Forward declare AbstractDispatcher
class File { // Parent class for the elements (ArchivedFile, SplitFile and
 // ExtractedFile)
 public:
 // This function accepts an object of any class derived from
 // AbstractDispatcher and must be implemented in all derived classes
 virtual void Accept(AbstractDispatcher&amp; dispatcher) = 0;
// Forward declare specific elements (files) to be dispatched
class ArchivedFile;
class SplitFile;
class ExtractedFile;
class AbstractDispatcher { // Declares the interface for the dispatcher
 public:
 // Declare overloads for each kind of a file to dispatch
 virtual void Dispatch(ArchivedFile&amp; file) = 0;
 virtual void Dispatch(SplitFile&amp; file) = 0;
 virtual void Dispatch(ExtractedFile&amp; file) = 0;
class ArchivedFile : public File { // Specific element class #1
 public:
 // Resolved at runtime, it calls the dispatcher's overloaded function,
 // corresponding to ArchivedFile.
 void Accept(AbstractDispatcher&amp; dispatcher) override {
 dispatcher.Dispatch(*this);
};
class SplitFile : public File { // Specific element class #2
 public:
 // Resolved at runtime, it calls the dispatcher's overloaded function,
 // corresponding to SplitFile.
 void Accept(AbstractDispatcher&amp; dispatcher) override {
 dispatcher.Dispatch(*this);
};
class ExtractedFile : public File { // Specific element class #3
 public:
 // Resolved at runtime, it calls the dispatcher's overloaded function,
 // corresponding to ExtractedFile.
 void Accept(AbstractDispatcher&amp; dispatcher) override {
 dispatcher.Dispatch(*this);
};
class Dispatcher : public AbstractDispatcher { // Implements dispatching of all
 // kind of elements (files)
 public:
 void Dispatch(ArchivedFile&amp;) override {
 std::cout « "dispatching ArchivedFile" « std::endl;
 void Dispatch(SplitFile&amp;) override {
 std::cout « "dispatching SplitFile" « std::endl;
 void Dispatch(ExtractedFile&amp;) override {
 std::cout « "dispatching ExtractedFile" « std::endl;
};
int main() {
 ArchivedFile archived_file;
 SplitFile split_file;
 ExtractedFile extracted_file;
 std::vector&lt;File*&gt; files = {
 &amp;archived_file,
 &amp;split_file,
 &amp;extracted_file,
 Dispatcher dispatcher;
 for (File* file : files) {
 file-&gt;Accept(dispatcher);
Go example.
Go does not support overloading, so the visit methods need different names.
Sources.
package main
import "fmt"
type Visitor interface {
 visitWheel(wheel Wheel) string
 visitEngine(engine Engine) string
 visitBody(body Body) string
 visitCar(car Car) string
type element interface {
 Accept(visitor Visitor) string
type Wheel struct {
 name string
func (w *Wheel) Accept(visitor Visitor) string {
 return visitor.visitWheel(*w)
func (w *Wheel) getName() string {
 return w.name
func (e *Engine) Accept(visitor Visitor) string {
 return visitor.visitEngine(*e)
func (b *Body) Accept(visitor Visitor) string {
 return visitor.visitBody(*b)
type Car struct {
 engine Engine
 body Body
 wheels [4]Wheel
func (c *Car) Accept(visitor Visitor) string {
 elements := []element{
 &amp;c.engine,
 &amp;c.body,
 &amp;c.wheels[0],
 &amp;c.wheels[1],
 &amp;c.wheels[2],
 &amp;c.wheels[3],
 res := visitor.visitCar(*c)
 for _, elem := range elements {
 res += elem.Accept(visitor)
 return res
func (pv *PrintVisitor) visitWheel(wheel Wheel) string {
 return fmt.Sprintln("visiting", wheel.getName(), "wheel")
func (pv *PrintVisitor) visitEngine(engine Engine) string {
 return fmt.Sprintln("visiting engine")
func (pv *PrintVisitor) visitBody(body Body) string {
 return fmt.Sprintln("visiting body")
func (pv *PrintVisitor) visitCar(car Car) string {
 return fmt.Sprintln("visiting car")
/* output:
visiting car
visiting engine
visiting body
visiting front left wheel
visiting front right wheel
visiting back left wheel
visiting back right wheel
func main() {
 car := Car{
 engine: Engine{},
 body: Body{},
 wheels: [4]Wheel{
 {"front left"},
 {"front right"},
 {"back left"},
 {"back right"},
 res := car.Accept(&amp;visitor)
 fmt.Println(res)
Java example.
The following example is in the language Java, and shows how the contents of a tree of nodes (in this case describing the components of a car) can be printed. Instead of creating codice_44 methods for each node subclass (codice_45, codice_46, codice_47, and codice_48), one visitor class (codice_49) performs the required printing action. Because different node subclasses require slightly different actions to print properly, codice_49 dispatches actions based on the class of the argument passed to its codice_1 method. codice_52, which is analogous to a save operation for a different file format, does likewise.
Sources.
import java.util.List;
interface CarElement {
 void accept(CarElementVisitor visitor);
interface CarElementVisitor {
 void visit(Body body);
 void visit(Car car);
 void visit(Engine engine);
 void visit(Wheel wheel);
class Wheel implements CarElement {
 private final String name;
 public Wheel(final String name) {
 this.name = name;
 public String getName() {
 return name;
 @Override
 public void accept(CarElementVisitor visitor) {
 * accept(CarElementVisitor) in Wheel implements
 * accept(CarElementVisitor) in CarElement, so the call
 * to accept is bound at run time. This can be considered
 * the *first* dispatch. However, the decision to call
 * visit(Wheel) (as opposed to visit(Engine) etc.) can be
 * made during compile time since 'this' is known at compile
 * time to be a Wheel. Moreover, each implementation of
 * CarElementVisitor implements the visit(Wheel), which is
 * another decision that is made at run time. This can be
 * considered the *second* dispatch.
 visitor.visit(this);
class Body implements CarElement {
 @Override
 public void accept(CarElementVisitor visitor) {
 visitor.visit(this);
class Engine implements CarElement {
 @Override
 public void accept(CarElementVisitor visitor) {
 visitor.visit(this);
class Car implements CarElement {
 private final List&lt;CarElement&gt; elements;
 public Car() {
 this.elements = List.of(
 new Wheel("front left"), new Wheel("front right"),
 new Wheel("back left"), new Wheel("back right"),
 new Body(), new Engine()
 @Override
 public void accept(CarElementVisitor visitor) {
 for (CarElement element : elements) {
 element.accept(visitor);
 visitor.visit(this);
class CarElementDoVisitor implements CarElementVisitor {
 @Override
 public void visit(Body body) {
 System.out.println("Moving my body");
 @Override
 public void visit(Car car) {
 System.out.println("Starting my car");
 @Override
 public void visit(Wheel wheel) {
 System.out.println("Kicking my " + wheel.getName() + " wheel");
 @Override
 public void visit(Engine engine) {
 System.out.println("Starting my engine");
class CarElementPrintVisitor implements CarElementVisitor {
 @Override
 public void visit(Body body) {
 System.out.println("Visiting body");
 @Override
 public void visit(Car car) {
 System.out.println("Visiting car");
 @Override
 public void visit(Engine engine) {
 System.out.println("Visiting engine");
 @Override
 public void visit(Wheel wheel) {
 System.out.println("Visiting " + wheel.getName() + " wheel");
public class VisitorDemo {
 public static void main(final String[] args) {
 Car car = new Car();
 car.accept(new CarElementPrintVisitor());
 car.accept(new CarElementDoVisitor());
Common Lisp example.
Sources.
 ((elements :initarg :elements)))
 ((name :initarg :name :initform "&lt;unnamed-car-part&gt;")))
 (print-object (slot-value p 'name) stream))
 (with-slots (elements) a
 (dolist (e elements)
 (funcall function e other-object))))
 (format t "don't know how ~s and ~s should interact~%" object other-object))
 (format t "kicking wheel ~s ~s times~%" object other-object))
 (format t "kicking wheel ~s symbolically using symbol ~s~%" object other-object))
 (format t "starting engine ~s ~s times~%" object other-object))
 (format t "starting engine ~s symbolically using symbol ~s~%" object other-object))
(let ((a (make-instance 'auto
 :elements `(,(make-instance 'wheel :name "front-left-wheel")
 ,(make-instance 'wheel :name "front-right-wheel")
 ,(make-instance 'wheel :name "rear-left-wheel")
 ,(make-instance 'wheel :name "rear-right-wheel")
 ,(make-instance 'body :name "body")
 ,(make-instance 'engine :name "engine")))))
 ;; traverse to print elements
 ;; stream *standard-output* plays the role of other-object here
 (traverse #'print a *standard-output*)
 (terpri) ;; print newline
 ;; traverse with arbitrary context from other object
 (traverse #'do-something a 42)
 ;; traverse with arbitrary context from other object
 (traverse #'do-something a 'abc))
Notes.
The codice_53 parameter is superfluous in codice_54. The reason is that it is possible to use an anonymous function that calls the desired target method with a lexically captured object:
(defmethod traverse (function (a auto)) ;; other-object removed
 (with-slots (elements) a
 (dolist (e elements)
 (funcall function e)))) ;; from here too
 ;; alternative way to print-traverse
 (traverse (lambda (o) (print o *standard-output*)) a)
 ;; alternative way to do-something with
 ;; elements of a and integer 42
 (traverse (lambda (o) (do-something o 42)) a)
Now, the multiple dispatch occurs in the call issued from the body of the anonymous function, and so codice_54 is just a mapping function that distributes a function application over the elements of an object. Thus all traces of the Visitor Pattern disappear, except for the mapping function, in which there is no evidence of two objects being involved. All knowledge of there being two objects and a dispatch on their types is in the lambda function.
Python example.
Python does not support method overloading in the classical sense (polymorphic behavior according to type of passed parameters), so the "visit" methods for the different model types need to have different names.
Sources.
Visitor pattern example.
from abc import ABCMeta, abstractmethod
NOT_IMPLEMENTED = "You should implement this."
class CarElement:
 __metaclass__ = ABCMeta
 @abstractmethod
 def accept(self, visitor):
 raise NotImplementedError(NOT_IMPLEMENTED)
class Body(CarElement):
 def accept(self, visitor):
 visitor.visitBody(self)
class Engine(CarElement):
 def accept(self, visitor):
 visitor.visitEngine(self)
class Wheel(CarElement):
 def __init__(self, name):
 self.name = name
 def accept(self, visitor):
 visitor.visitWheel(self)
class Car(CarElement):
 def __init__(self):
 self.elements = [
 Wheel("front left"), Wheel("front right"),
 Wheel("back left"), Wheel("back right"),
 Body(), Engine()
 def accept(self, visitor):
 for element in self.elements:
 element.accept(visitor)
 visitor.visitCar(self)
class CarElementVisitor:
 __metaclass__ = ABCMeta
 @abstractmethod
 def visitBody(self, element):
 raise NotImplementedError(NOT_IMPLEMENTED)
 @abstractmethod
 def visitEngine(self, element):
 raise NotImplementedError(NOT_IMPLEMENTED)
 @abstractmethod
 def visitWheel(self, element):
 raise NotImplementedError(NOT_IMPLEMENTED)
 @abstractmethod
 def visitCar(self, element):
 raise NotImplementedError(NOT_IMPLEMENTED)
class CarElementDoVisitor(CarElementVisitor):
 def visitBody(self, body):
 print("Moving my body.")
 def visitCar(self, car):
 print("Starting my car.")
 def visitWheel(self, wheel):
 print("Kicking my {} wheel.".format(wheel.name))
 def visitEngine(self, engine):
 print("Starting my engine.")
class CarElementPrintVisitor(CarElementVisitor):
 def visitBody(self, body):
 print("Visiting body.")
 def visitCar(self, car):
 print("Visiting car.")
 def visitWheel(self, wheel):
 print("Visiting {} wheel.".format(wheel.name))
 def visitEngine(self, engine):
 print("Visiting engine.")
car = Car()
car.accept(CarElementPrintVisitor())
car.accept(CarElementDoVisitor())
Output.
Visiting front left wheel.
Visiting front right wheel.
Visiting back left wheel.
Visiting back right wheel.
Visiting body.
Visiting engine.
Visiting car.
Kicking my front left wheel.
Kicking my front right wheel.
Kicking my back left wheel.
Kicking my back right wheel.
Moving my body.
Starting my engine.
Starting my car.
Abstraction.
If one is using Python 3 or above, they can make a general implementation of the accept method:
class Visitable:
 def accept(self, visitor):
 lookup = "visit_" + type(self).__qualname__.replace(".", "_")
 return getattr(visitor, lookup)(self)
One could extend this to iterate over the class's method resolution order if they would like to fall back on already-implemented classes. They could also use the subclass hook feature to define the lookup in advance.

