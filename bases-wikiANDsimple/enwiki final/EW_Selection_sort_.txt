
In computer science, selection sort is an in-place comparison sorting algorithm. It has an O("n"2) time complexity, which makes it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity and has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.
The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right. 
The time efficiency of selection sort is quadratic, so there are a number of sorting techniques which have better time complexity than selection sort. One thing which distinguishes selection sort from other sorting algorithms is that it makes the minimum possible number of swaps, in the worst case.
Example.
Here is an example of this sort algorithm sorting five elements:
Selection sort can also be used on list structures that make add and remove efficient, such as a linked list. In this case it is more common to "remove" the minimum element from the remainder of the list, and then "insert" it at the end of the values sorted so far. For example:
Implementations.
Below is an implementation in C. More implementations can be found on .
/* a[0] to a[aLength-1] is the array to sort */
int i,j;
int aLength; // initialise to a's length
/* advance the position through the entire array */
/* (could do i &lt; aLength-1 because single element is also min element) */
for (i = 0; i &lt; aLength-1; i++)
 /* find the min element in the unsorted a[i .. aLength-1] */
 /* assume the min is the first element */
 int jMin = i;
 /* test against elements after i to find the smallest */
 for (j = i+1; j &lt; aLength; j++)
 /* if this element is less, then it is the new minimum */
 if (a[j] &lt; a[jMin])
 /* found new minimum; remember its index */
 jMin = j;
 if (jMin != i) 
 swap(a[i], a[jMin]);
Complexity.
Selection sort is not difficult to analyze compared to other sorting algorithms, since none of the loops depend on the data in the array. Selecting the minimum requires scanning formula_1 elements (taking formula_2 comparisons) and then swapping it into the first position. Finding the next lowest element requires scanning the remaining formula_2 elements and so on. Therefore, the total number of comparisons is
formula_4
By arithmetic progression,
formula_5
which is of complexity formula_6 in terms of number of comparisons. Each of these scans requires one swap for formula_2 elements (the final element is already in place).
Comparison to other sorting algorithms.
Among quadratic sorting algorithms (sorting algorithms with a simple average-case of Θ("n"2)), selection sort almost always outperforms bubble sort and gnome sort. Insertion sort is very similar in that after the "k"th iteration, the first formula_8 elements in the array are in sorted order. Insertion sort's advantage is that it only scans as many elements as it needs in order to place the formula_9st element, while selection sort must scan all remaining elements to find the formula_9st element.
Simple calculation shows that insertion sort will therefore usually perform about half as many comparisons as selection sort, although it can perform just as many or far fewer depending on the order the array was in prior to sorting. It can be seen as an advantage for some real-time applications that selection sort will perform identically regardless of the order of the array, while insertion sort's running time can vary considerably. However, this is more often an advantage for insertion sort in that it runs much more efficiently if the array is already sorted or "close to sorted."
While selection sort is preferable to insertion sort in terms of number of writes (formula_2 swaps versus up to formula_12 swaps, with each swap being two writes), this is roughly twice the theoretical minimum achieved by cycle sort, which performs at most "n" writes. This can be important if writes are significantly more expensive than reads, such as with EEPROM or Flash memory, where every write lessens the lifespan of the memory.
Selection sort can be implemented without unpredictable branches for the benefit of CPU branch predictors, by finding the location of the minimum with branch-free code and then performing the swap unconditionally.
Finally, selection sort is greatly outperformed on larger arrays by formula_13 divide-and-conquer algorithms such as mergesort. However, insertion sort or selection sort are both typically faster for small arrays (i.e. fewer than 10–20 elements). A useful optimization in practice for the recursive algorithms is to switch to insertion sort or selection sort for "small enough" sublists.
Variants.
Heapsort greatly improves the basic algorithm by using an implicit heap data structure to speed up finding and removing the lowest datum. If implemented correctly, the heap will allow finding the next lowest element in formula_14 time instead of formula_15 for the inner loop in normal selection sort, reducing the total running time to formula_13.
A bidirectional variant of selection sort (called double selection sort or sometimes cocktail sort due to its similarity to cocktail shaker sort) finds "both" the minimum and maximum values in the list in every pass. This requires three comparisons per two items (a pair of elements is compared, then the greater is compared to the maximum and the lesser is compared to the minimum) rather than regular selection sort's one comparison per item, but requires only half as many passes, a net 25% savings.
Selection sort can be implemented as a stable sort if, rather than swapping in step 2, the minimum value is "inserted" into the first position and the intervening values shifted up. However, this modification either requires a data structure that supports efficient insertions or deletions, such as a linked list, or it leads to performing formula_17 writes.
In the bingo sort variant, items are sorted by repeatedly looking through the remaining items to find the greatest value and moving "all" items with that value to their final location. Like counting sort, this is an efficient variant if there are many duplicate values: selection sort does one pass through the remaining items for each "item" moved, while Bingo sort does one pass for each "value". After an initial pass to find the greatest value, subsequent passes move every item with that value to its final location while finding the next value as in the following pseudocode (arrays are zero-based and the for-loop includes both the top and bottom limits, as in Pascal):
bingo(array A)
begin
 last := length(A) - 1;
 { The first iteration is written to look very similar to the subsequent ones,
 nextMax := A[last];
 for i := last - 1 downto 0 do
 if A[i] &gt; nextMax then
 nextMax := A[i];
 while (last &gt; 0) and (A[last] = nextMax) do
 last := last - 1;
 while last &gt; 0 do begin
 prevMax := nextMax;
 nextMax := A[last];
 for i := last - 1 downto 0 do
 if A[i] &gt; nextMax then
 if A[i] &lt;&gt; prevMax then
 nextMax := A[i];
 else begin
 swap(A[i], A[last]);
 last := last - 1;
 end
 while (last &gt; 0) and (A[last] = nextMax) do
 last := last - 1;
 end;
end;
Thus, if on average there are more than two items with the same value, bingo sort can be expected to be faster because it executes the inner loop fewer times than selection sort.

