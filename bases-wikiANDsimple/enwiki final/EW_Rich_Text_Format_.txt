
The Rich Text Format (often abbreviated RTF) is a proprietary document file format with published specification developed by Microsoft Corporation from 1987 until 2008 for cross-platform document interchange with Microsoft products. Prior to 2008, Microsoft published updated specifications for RTF with major revisions of Microsoft Word and Office versions.
Most word processors are able to read and write some versions of RTF. There are several different revisions of RTF specification; portability of files will depend on what version of RTF is being used.
RTF should not be confused with enriched text or its predecessor Rich Text, nor with IBM's RFT-DCA (Revisable Format Text-Document Content Architecture), as these are different specifications.
History.
Richard Brodie, Charles Simonyi, and David Luebbert, members of the Microsoft Word development team, developed the original RTF in the middle to late 1980s. The first RTF reader and writer shipped in 1987 as part of Microsoft Word 3.0 for Macintosh, which implemented the RTF version 1.0 specification. All subsequent releases of Microsoft Word for Macintosh, as well as all Windows versions, can read and write in RTF format.
Microsoft maintains RTF. The final version was 1.9.1 in 2008, which implemented features of Office 2007. Microsoft has discontinued enhancements to the RTF specification, so features new to Word 2010 or a later version will not save properly to RTF. Microsoft anticipates no further updates to RTF, but has stated willingness to consider editorial and other non-substantive modifications of the RTF Specification during an associated ISO/IEC 29500 balloting period.
RTF files were used to produce Windows Help files, though these have since been superseded by Microsoft Compiled HTML Help files.
Code syntax.
RTF's syntax was influenced by the TeX typesetting language. It is programmed using groups, a backslash, a control word and a delimiter. Groups are contained within curly braces ({}) and indicate which attributes should be applied to certain text.
The backslash (\) introduces a control word, which is a specifically programmed command for RTF. Control words can have certain states in which they are active. These states are represented by numbers. For example,
A delimiter is one of three things:
As an example, the following RTF code
 {\rtf1\ansi{\fonttbl\f0\fswiss Helvetica;}\f0\pard
 This is some {\b bold} text.\par
would be rendered as follows:
This is some bold text.
Character encoding.
A standard RTF file can only consist of 7-bit ASCII characters, but can use escape sequences to encode other characters. The two character escapes are code page escapes and, starting with RTF 1.5, Unicode escapes. In a code page escape, two hexadecimal digits following a backslash and typewriter apostrophe denote a character taken from a Windows code page. For example, if the code page is set to Windows-1256, the sequence codice_1 will encode the Arabic letter "bāʼ" ب. It is also possible to specify a "Character Set" in the preamble of the RTF document and associate it to a header. For example, the preamble has the text codice_2, then, in the body of the document, the text codice_3 will represent the code point codice_4 from the Character Set 128 (which corresponds to the Shift-JIS code page), which encodes "金".
For a Unicode escape, the control word codice_5 is used, followed by a 16-bit signed integer which corresponds to the Unicode UTF-16 code unit number. For the benefit of programs without Unicode support, this must be followed by the nearest representation of this character in the specified code page. For example, codice_6 would give the Arabic letter "bāʼ" ب, but indicates that older programs which do not support Unicode should render it as a question mark instead.
The control word codice_7 can be used to indicate that subsequent Unicode escape sequences within the current group do not specify the substitution character.
Until RTF specification version 1.5 release in 1997, RTF only handled 7-bit characters directly and 8-bit characters encoded as hexadecimal (using codice_8). Since RTF 1.5, however, RTF control words generally accept signed 16-bit numbers as arguments. Unicode values greater than 32767 must be expressed as negative numbers. If a Unicode character is outside BMP, it is encoded with a surrogate pair. Support for Unicode was made due to text handling changes in Microsoft Word – Microsoft Word 97 is a partially Unicode-enabled application and it handles text using the 16-bit Unicode character encoding scheme. Microsoft Word 2000 and later versions are Unicode-enabled applications that handle text using the 16-bit Unicode character encoding scheme.
Because RTF files are usually 7-bit ASCII plain text, they can be easily transmitted between PC-based operating systems. Converters that communicate with Microsoft Word for MS Windows or Macintosh generally expect data transfer as 8-bit characters and binary data which can contain any 8-bit values.
Human readability.
RTF is a data format for saving and sharing documents, not a markup language; it is not intended for intuitive and easy typing. Nonetheless, unlike many word processing formats, RTF code can be human-readable. When an RTF file containing mostly Latin characters without diacritics is viewed as a plain text file, the underlying ASCII text is readable, provided that the author has kept formatting concise.
When RTF was released, most word processors used binary file formats; Microsoft Word, for example, used the .DOC file format. RTF was unique in its simple formatting control which allowed non-RTF aware programs like Microsoft Notepad to open and provide readable files. Today, the most word processors have moved to XML-based file formats (Word has switched to the .docx file format). Regardless, these files contain large amounts of formatting code, so are often ten or more times larger than the corresponding plain text.
To be standard-compliant RTF, non-ASCII characters must be escaped. Thus, even with concise formatting, text that uses certain dashes and quotation marks is less legible. Latin languages with many diacritics are particularly difficult to read in RTF, as they result in substitutions like \'f1 for ñ and \'e9 for é. Non-Latin scripts are illegible in RTF — \u21563, for example, is used for 吻. From the beginning, RTF has also supported Microsoft OLE embedded objects and Macintosh Edition Manager subscriber objects, which are not human-readable.
Common uses and interoperability.
Most word processing software support either RTF format importing and exporting for some RTF specification or direct editing, which makes it a "common" format between otherwise incompatible word processing software and operating systems. Most applications that read RTF files silently ignore unknown RTF control words. These factors contribute to its interoperability, though it is still dependent on the specific RTF version in use. There are several consciously designed or accidentally born RTF dialects.
RTF is the internal markup language used by Microsoft Word. Since 1987, RTF files have been able to be transferred back and forth between many old and new computer systems (and now over the Internet), despite differences between operating systems and their versions. This makes it a useful format for basic formatted text documents such as instruction manuals, résumés, letters, and modest information documents. These documents, at minimum, support bold, italic and underline text formatting. Also typically supported are left-, center- and right-aligned text, font specification and document margins.
Font and margin defaults, style presets and other functions vary according to program defaults. There may also be incompatibilities between different RTF versions, e.g. between RTF 1.0 1987 and later specifications, or between RTF 1.0-1.4 and RTF 1.5+ in use of Unicode characters. And though RTF supports metadata like title and author, not all implementations support this. Nevertheless, the RTF format is consistent enough to be considered highly portable and acceptable for cross-platform use.
Objects.
Microsoft Object Linking and Embedding (OLE) objects and Macintosh Edition Manager subscriber objects allow embedding of other files inside the RTF, such as tables or charts from spreadsheet application. However, since these objects are not widely supported in programs for viewing or editing RTF files, they also limit RTF's interoperability. If a software that understands an OLE object is not available, the object is usually replaced by a bitmap representation of the object (i.e., a picture) or not displayed at all.
Pictures.
RTF supports inclusion of JPEG, PNG, Enhanced Metafile (EMF), Windows Metafile (WMF), Apple PICT, Windows device-dependent bitmap, Windows device-independent bitmap and OS/2 Metafile picture types in hexadecimal (the default) or binary format in a RTF file. Not all of these picture types are supported in all RTF readers, however. When a RTF document is opened in software that does not support the picture type of an inserted picture, the picture is not displayed. RTF writers usually either convert an inserted picture in an unsupported picture type to one in a supported picture type, or do not include picture at all.
For better compatibility with Microsoft products, some RTF writers include the same picture in two different picture types in one RTF file: one supported picture type to display, and one uncompressed WMF copy of the original picture to improve compatibility with some Microsoft applications like Wordpad.
This method increases the RTF file size dramatically. The RTF specification does not require this method, and several implementations do not include the WMF copy (e.g. Abiword or Ted).
For Microsoft Word, it is also possible to set a specific registry value ("ExportPictureWithMetafile=0") to prevent Word from saving the WMF copy.
Fonts.
RTF supports embedding of fonts used in the document, but this feature is not widely supported in software implementations.
RTF also supports generic font family names used for font substitution: "roman" (serif), "Swiss" (sans-serif), "modern" (monospace), "script", "decorative" and "technical". This feature is not widely supported either.
Annotations.
Since RTF 1.0, the RTF specification has supported document annotations/comments. The RTF 1.7 specification defined some new features for annotations, including the date stamp (there was previously only "time stamp") and parents of annotations. When a RTF document with annotations is opened in an application that does not support RTF annotations, the annotations are not shown. Similarly, when a document with annotations is saved as RTF in an application that does not support RTF annotations, the annotations are not preserved in the RTF file. Some implementations, like Abiword (since version 2.8) and IBM Lotus Symphony (up to version 1.3), may hide annotations by default or require some user action to display them.
The RTF specification also supports footnotes, which are widely supported in RTF implementations (e.g. in OpenOffice.org, Abiword, KWord, Ted, but not in Wordpad). Endnotes are implemented as a variation on footnotes, so applications that support footnotes but not endnotes will render an endnote as a footnote.
Microsoft products do not support comments within footers, footnotes or headers. Similarly, Microsoft products do not support footnotes in headers, footers, or comments. Inserting a comment or a footnote in one of these disallowed contexts may result in a corrupted document.
Drawing objects.
The RTF 1.2 specification defined use of drawing objects, known as shapes, such as rectangles, ellipses, lines, arrows and polygons. The RTF 1.5 specification introduced many new control words for drawing objects.
However, many RTF implementations, such as Apache OpenOffice, do not support drawing objects (though they are supported in LibreOffice 4.0 on) or Abiword. Applications which do not support RTF drawing objects do not display or save the shapes. Some implementations will also not display any text inside drawing objects.
Security concerns.
Unlike Microsoft Word's DOC format, as well as the newer Office Open XML and OpenDocument formats, RTF does not support macros. For this reason, RTF was often recommended over those formats when the spread of computer viruses through macros was a concern. However, having the .RTF extension does not guarantee a safe file, since Microsoft Word will open standard DOC files renamed with an RTF extension and run any contained macros as usual. Manual examination of a file in a plain text editor such as Notepad, or use of the codice_9 command in a UNIX-like systems, is required to determine whether or not a suspect file is really RTF. Enabling Word's "Confirm file format conversion on open" option can also assist by warning a document being opened is in a format that does not match the format implied by the file's extension, and giving the option to abort opening that file. One exploit attacking a vulnerability was patched in Microsoft Word in April 2015.
Since 2014 there have been malware RTF files embedding OpenXML exploits.
Implementations.
Each RTF implementation usually implements only some versions or subsets of the RTF specification. Many of the available RTF converters cannot understand all new features in the latest RTF specifications.
The WordPad editor in Microsoft Windows creates RTF files by default. It once defaulted to the Microsoft Word 6.0 file format, but write support for Word documents (.doc) was dropped in a security update. Read support was also dropped in Windows 7. WordPad does not support some RTF features, such as headers and footers. However, WordPad can read and save many RTF features that it cannot create, including tables, strikeout, superscript, subscript, "extra" colors, text background colors, numbered lists, right or left indent, quasi-hypertext and URL linking, and various line spacings. RTF is also the data format for "rich text controls" in MS Windows APIs.
The default text editor for macOS, TextEdit, can also view, edit and save RTF files as well as RTFD files. As of July 2009, TextEdit has limited ability to edit RTF document margins. Much older Mac word processing application programs such as MacWrite and WriteNow had the same RTF abilities as TextEdit has.
The free and open-source word processors AbiWord, Apache OpenOffice, Bean, Calligra, KWord, LibreOffice and NeoOffice can view, edit and save RTF files. The RTF format is also used in the Ted word processor.
Scrivener uses individual RTF files for all the text files that make up a given "project".
SIL International’s freeware application for developing and publishing dictionaries uses RTF as its most common form of document output. RTF files produced by Toolbox are designed to be used in Microsoft Word, but can also be used by other RTF-aware word processors.
RTF can be used on some ebook readers because of its interoperability, simplicity and low CPU processing requirements.
Libraries and converters.
The open-source script rtf2xml can partially convert RTF to XML.
GNU UnRTF is an open-source program to convert RTF into HTML, LaTeX, troff macros and other formats. pyth is a Python library to create and convert documents in RTF, XHTML and PDF format. Ruby RTF is a project to create Rich Text content via Ruby. RaTFink is a library of Tcl routines, free software, to generate RTF output, and a Cost script to convert SGML to RTF. RTF::Writer is a Perl module for generating RTF documents. PHPRtfLite is an API enabling developers to create RTF documents with PHP. Pandoc is an open source document converter with multiple output formats, including RTF. RTFGen is a project to create RTF documents via pure PHP. rtf.js is a JavaScript based library to render RTF documents in HTML.
The macOS command line tool textutil can convert files between rtf, rtfd, text, doc, docx, wordml, odt and webarchive formats.
Criticism.
The Rich Text Format was the standard file format for text-based documents in applications developed for Microsoft Windows. Microsoft did not initially make the RTF specification publicly available, making it difficult for competitors to develop document conversion features in their applications. Because Microsoft's developers had access to the specification, Microsoft's applications had better compatibility with the format. Also, each time Microsoft changed the RTF specification, Microsoft's own applications had a lead in time-to-market, because competitors had to redevelop their applications after studying the newer version of the format.
Novell alleged that Microsoft's practices were anticompetitive in its 2004 antitrust complaint against Microsoft.
According to blogger Hannes Schmidt, the RTF specifications lack some of the semantic definitions necessary to read, write and modify documents.

