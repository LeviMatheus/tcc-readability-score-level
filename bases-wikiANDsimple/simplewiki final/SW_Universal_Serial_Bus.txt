In computing, Universal Serial Bus (USB) is technology that allows to connect devices to a computer. It is a serial bus. It is most used on PCs but can also be used on other devices such as the PlayStation 2, PlayStation 3 and the Xbox 360. The different devices can be connected using a standard interface.
The stadard was made to improve plug and play. A new device that needs to be used can simply be connected. The computer will then recognise it. After that it can directly be used. When it is no longer needed it is disconnected again. This technology is called hot swapping. With hot swapping the computer does not need to be restarted to use the device.
USB can provide a limited amount of power. This means that devices that only need a little power can get it from the bus. It also allows to make gadgets like USB battery chargers, lights, and fans.
Most people use USB for mice, keyboards, scanners, printers, digital cameras, and flash drives. There are over one billion USB devices around the world.
Brief history.
The first version of the Universal Serial Bus was created in 1995. This new technology became an instant success. Ever since USB was introduced different producers of electronic devices thought about the future of the bus. It can provide connection to the computer and other devices like for example laptops and MP3 players.
The bus was introduced by seven companies which represent the leaders in the industry of information technology (IT): Compaq, IBM, Intel, Microsoft, NEC, Northern Telecom, and Digital Equipment Corporation (DEC).
Several years earlier adopters and developers of USB gathered in a special hotel in California to test their devices. The meeting of USB developers had the name of "Plugfest". They selected a special hotel that included two rooms: one used for sleeping and the other one for making tests. The meeting lasted three days and in this time the representatives of about fifty companies connected their USB devices to one general host system.
The logo of the USB device also has its own history. Not so many people know that the USB logo was in development for several months. Today we can see the final variant of the USB logo.
Different standards.
Currently, there are three different USB standards that are in use: USB 1.0, USB 1.1 and USB 2.0. USB 1.0 has almost died out. USB offers 3 different transfer speeds: 1.5 MBit per second (called "low speed"), 12 MBit per second ("Full Speed") and 480 MBit/second ("Hi Speed"). Hi speed is only available in USB 2.0. Please also note that these speeds are raw data speeds (in Million bits per second). The actual data rate is usually lower (and maxes out at around 320 MBit per second due to protocol overhead.
In order to be able to use the transfer rate "hi speed" both the USB controller and the connected device need to support it. USB is backwards compatible. A USB2.0 device can be used with a USB 1.1 controller. It will not be able to transfer at 480 MBit/seconds though.
USB Hubs.
Almost all computers nowadays have USB ports, most of them support USB 2.0. HowThe number of ports is usually limited, though (2-6 ports are common configurations). USB allows the use of so-called USB hubs to add more ports.
The hubs themselves are also USB 1.1 or USB 2.0 compliant. On an USB 2.0 controller, standards can be mixed. Please note however, that devices connected to a USB 1.1 hub will only offer the data rates of USB 1.1.
USB Connectors.
USb was designed to be easy to use. When the connectors were designed, lessons learned from other connection techologies were also applied to USB connectors.
How USB is done.
A USB system has an asymmetric design. It is made of a host,several downstream USB ports, and multiple peripheral devices connected in a star topology. Additional USB hubs may be included in the tiers, allowing branching into a tree structure with up to five tier levels
A USB host can have multiple host controllers. Each host controller provides one or more USB ports. Up to 127 devices, including the hub devices, may be connected to a single host controller.
USB devices are linked in series through "hubs". There is always one hub known as the root hub. The root hub is built into to the host controller. There are special hubs, called "sharing hubs". These allow multiple computers to access the same peripheral devices. They work by switching the access between PCs, either manually or automatically. They are popular in small-office environments. In network terms, they converge rather than diverge branches.
A physical USB device can have several logical sub-devices that are referred to as "device functions". A single device may provide several functions, for example, a webcam (video device function) with a built-in microphone (audio device function).
USB device communication is based on "pipes" (logical channels). Pipes are connections from the host controller to a logical entity on the device named an endpoint. The term "endpoint" is occasionally used to incorrectly refer to the pipe. A USB device can have up to 32 active pipes, 16 into the host controller and 16 out of the controller.
Each endpoint can transfer data in one direction only, either into or out of the device, so each pipe is uni-directional. Endpoints are grouped into "interfaces" and each interface is associated with a single device function. An exception to this is endpoint zero, which is used for device configuration and which is not associated with any interface.
When a USB device is first connected to a USB host, the USB device enumeration process is started. The enumeration starts by sending a reset signal to the USB device. The speed of the USB device is determined during the reset signaling. After reset, the USB device's information is read by the host, then the device is assigned a unique 7-bit address. If the device is supported by the host, the device drivers needed for communicating with the device are loaded and the device is set to a configured state. If the USB host is restarted, the enumeration process is repeated for all connected devices.
The host controller polls the bus for traffic, usually in a round-robin fashion, so no USB device can transfer any data on the bus without an explicit request from the host controller.
Host controllers.
The computer hardware that contains the host controller and the root hub has an interface for the programmer. It is called "Host Controller Device" (HCD) and is defined by the hardware implementer.
For USB 1.0 and 1.1, there were two different HCD implementations, "Open Host Controller Interface" (OHCI) and "Universal Host Controller Interface" (UHCI). OHCI was developed by Compaq, Microsoft and National Semiconductor, UHCI by Intel.
VIA Technologies licensed the UHCI standard from Intel; all other chipset implementers use OHCI. UHCI relies more on software. This means UHCI is slightly more processor-intensive than OHCI but easier and cheaper to make. Because there were two different implementations, operating system vendors and hardware vendors needed to develop and test on both of them. This increased cost.
The USB specification does not specify any HCD interfaces and is not concerned with them. In other words, USB defines the format of data transfer through the port, but not the system by which the USB hardware communicates with the computer it sits in.
During the design phase of USB 2.0, the USB-IF insisted that there was only one implementation. The USB 2.0 HCD implementation is called the "Enhanced Host Controller Interface" (EHCI). Only EHCI can support hi-speed (480 Mbit/s) transfers. Most of PCI-based EHCI controllers have other HCD implementations called 'companion host controller' to support Full Speed (12 Mbit/s) and may be used for any device that claims to be a member of a certain class. An operating system is supposed to implement all device classes, so it can provide generic drivers for any USB device. Device classes are decided upon by the Device Working Group of the USB Implementers Forum.
USB device classes.
Use class information in the Interface Descriptors. This base class is defined to be used in Device Descriptors to indicate that class information should be determined from the Interface Descriptors in the device.
