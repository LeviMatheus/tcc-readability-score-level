In Computer science, a heuristic is a kind of algorithm. Most of the times, algorithms are made that calculate a good (possibly optimal) solution to a problem, with a deterministic run-time behavior. The algorithm may take a very long time, but it will always stop. A heuristic algorithm gives up one or both of these claims. It might usually find pretty good solutions, but there is no proof, that the solutions are indeed reasonably good. Alternatively, it might run reasonably quickly most of the time, but there is no proof that it will always do this.
Example.
One example where heuristics are useful is a kind of packing problem. The problem consists of packing a number of items. There are rules that need to be respected. For example, each item has a value and a weight. The problem now is to get the most valuable items, with the least weight possible. Another instance is fitting a number of differently-sized items into a confined space, like the trunk of a car.
To get the perfect solution to the problem, all possibilities must be tried. This is often no option, as trying them takes a long time, and on average, half the possibilities must be tried until a solution is found. So what most people will do is to start with the biggest item, fit it in, and then try to arrange the other items around it. This will give a good solution, most of the time. There are cases however, where such a solution is very bad.
Therefore, this is a heuristic solution.
When computers do heuristics they often use some kind of randomness.
