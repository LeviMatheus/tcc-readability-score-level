A superscalar CPU architecture implements a form of parallel computing called Instruction-level parallelism inside a single processor which allows faster CPU throughput at the same clock rate. A superscalar processor executes more than one instruction during a clock cycle by simultaneously dispatching multiple instructions (termed instruction dispatching) to multiple redundant functional units built inside the processor. Each functional unit is not a separate CPU core but an execution resource inside the CPU such as an arithmetic logic unit, floating point unit (FPU), a bit shifter, or a multiplier.
While most superscalar CPUs are also pipelined, it possible to have a non-pipelined superscalar CPU or a pipelined non-superscalar CPU.
In a superscalar CPU an instruction dispatcher reads instructions from memory and decides which ones can be run in parallel, dispatching them on the multiple redundant functional units available inside the CPU.
Superscalar CPU design is concerned with improving accuracy of the instruction dispatcher, and allowing it to keep the multiple functional units in use at all times. As of 2008 all general-purpose CPUs are superscalar, a typical superscalar CPU may include up to 4 ALUs, 2 FPUs, and two SIMD units. If the dispatcher failed to utilize all of the units at all times the performance of the CPU will suffer.
Limitations.
However even given infinitely fast dependency checking logic inside a conventional superscalar CPU, if the instruction stream itself has many dependencies, this would also limit the possible speedup. Thus the degree of intrinsic parallelism in the code stream forms another limitation.
No matter how fast the dispatcher speed, there is a practical limit on how many instructions can be simultaneously dispatched. While hardware advances will allow greater numbers of functional units (e.g, ALUs), the problem of checking instruction dependencies increases to a limit that the achievable superscalar dispatching limit is somewhat small. -- Likely on the order of five to six simultaneously dispatched instructions.
Alternatives.
The various alternative techniques are not mutually exclusiveâ€”they can be (and frequently are) combined in a single processor. Thus it is possible to design a multicore CPU is where each core is an independent processor containing multiple parallel superscalar pipelines. Some multicore processors also include vector capability.
