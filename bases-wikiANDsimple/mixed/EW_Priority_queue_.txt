
In computer science, a priority queue is an abstract data type similar to a regular queue or stack data structure in which each element additionally has a "priority" associated with it. In a priority queue, an element with high priority is served before an element with low priority. In some implementations, if two elements have the same priority, they are served according to the order in which they were enqueued, while in other implementations, ordering of elements with the same priority is undefined.
While priority queues are often implemented with heaps, they are conceptually distinct from heaps. A priority queue is a concept like "a list" or "a map"; just as a list can be implemented with a linked list or an array, a priority queue can be implemented with a heap or a variety of other methods such as an unordered array.
Operations.
A priority queue must at least support the following operations:
In addition, "peek" (in this context often called "find-max" or "find-min"), which returns the highest-priority element but does not modify the queue, is very frequently implemented, and nearly always executes in "O"(1) time. This operation and its "O"(1) performance is crucial to many applications of priority queues.
More advanced implementations may support more complicated operations, such as "pull_lowest_priority_element", inspecting the first few highest- or lowest-priority elements, clearing the queue, clearing subsets of the queue, performing a batch insert, merging two or more queues into one, incrementing priority of any element, etc.
Stacks and queues are different than priority queues. In a priority queue, the ordering is intrinsic: it depends on the value being inserted. In a stack or queue, the ordering is extrinsic: it depends on the order in which the value is inserted. In terms of behavioral subtyping, a queue is not a subtype of a priority queue, and a priority queue is not a subtype of a queue. Neither one can be substituted for the other, nor should either one be a subtype of the other in an inheritance hierarchy.
Implementation.
Naive implementations.
There are a variety of simple, usually inefficient, ways to implement a priority queue. They provide an analogy to help one understand what a priority queue is.
For instance, one can keep all the elements in an unsorted list ("O"(1) insertion time). Whenever the highest-priority element is requested, search through all elements for the one with the highest priority. ("O"("n") pull time),
 insert(node) {
 list.append(node)
 pull() {
 foreach node in list {
 if highest.priority &lt; node.priority {
 highest = node
 list.remove(highest)
 return highest
In another case, one can keep all the elements in a priority sorted list ("O"(n) insertion sort time ), whenever the highest-priority element is requested, the first one in the list can be returned. ( "O"(1) pull time )
 insert(node) {
 foreach (index, element) in list {
 if node.priority &lt; element.priority {
 list.insert_at_index(node,index)
 pull() {
 highest = list.get_at_index(list.length-1)
 list.remove(highest)
 return highest
Usual implementation.
To improve performance, priority queues are typically based on a heap, giving "O"(log "n") performance for inserts and removals, and "O"("n") to build initially from a set of "n" elements. Variants of the basic heap data structure such as pairing heaps or Fibonacci heaps can provide better bounds for some operations.
Alternatively, when a self-balancing binary search tree is used, insertion and removal also take "O"(log "n") time, although building trees from existing sequences of elements takes "O"("n" log "n") time; this is typical where one might already have access to these data structures, such as with third-party or standard libraries.
From a computational-complexity standpoint, priority queues are congruent to sorting algorithms. The section on the equivalence of priority queues and sorting algorithms, below, describes how efficient sorting algorithms can create efficient priority queues.
Specialized heaps.
There are several specialized heap data structures that either supply additional operations or outperform heap-based implementations for specific types of keys, specifically integer keys. Suppose the set of possible keys is {1, 2, ..., C}.
For applications that do many "peek" operations for every "extract-min" operation, the time complexity for peek actions can be reduced to "O"(1) in all tree and heap implementations by caching the highest priority element after every insertion and removal. For insertion, this adds at most a constant cost, since the newly inserted element is compared only to the previously cached minimum element. For deletion, this at most adds an additional "peek" cost, which is typically cheaper than the deletion cost, so overall time complexity is not significantly impacted.
Monotone priority queues are specialized queues that are optimized for the case where no item is ever inserted that has a lower priority (in the case of min-heap) than any item previously extracted. This restriction is met by several practical applications of priority queues.
Equivalence of priority queues and sorting algorithms.
Using a priority queue to sort.
The semantics of priority queues naturally suggest a sorting method: insert all the elements to be sorted into a priority queue, and sequentially remove them; they will come out in sorted order. This is actually the procedure used by several sorting algorithms, once the layer of abstraction provided by the priority queue is removed. This sorting method is equivalent to the following sorting algorithms:
Using a sorting algorithm to make a priority queue.
A sorting algorithm can also be used to implement a priority queue. Specifically, Thorup says:
We present a general deterministic linear space reduction from priority queues to sorting implying that if we can sort up to "n" keys in "S"("n") time per key, then there is a priority queue supporting "delete" and "insert" in "O"("S"("n")) time and "find-min" in constant time.
That is, if there is a sorting algorithm which can sort in "O"("S") time per key, where "S" is some function of "n" and word size, then one can use the given procedure to create a priority queue where pulling the highest-priority element is "O"(1) time, and inserting new elements (and deleting elements) is "O"("S") time. For example, if one has an "O"("n" log "n") sort algorithm, one can create a priority queue with "O"(1) pulling and "O"(n log "n") insertion.
Libraries.
A priority queue is often considered to be a "container data structure".
The Standard Template Library (STL), and the C++ 1998 standard, specifies codice_1 as one of the STL container adaptor class templates. However, it does not specify how two elements with same priority should be served, and indeed, common implementations will not return them according to their order in the queue. It implements a max-priority-queue, and has three parameters: a comparison object for sorting such as a function object (defaults to less&lt;T&gt; if unspecified), the underlying container for storing the data structures (defaults to std::vector&lt;T&gt;), and two iterators to the beginning and end of a sequence. Unlike actual STL containers, it does not allow iteration of its elements (it strictly adheres to its abstract data type definition). STL also has utility functions for manipulating another random-access container as a binary max-heap. The Boost libraries also have an implementation in the library heap.
Python's heapq module implements a binary min-heap on top of a list.
Java's library contains a class, which implements a min-priority-queue.
Scala's library contains a PriorityQueue class, which implements a max-priority-queue.
Go's library contains a container/heap module, which implements a min-heap on top of any compatible data structure.
The Standard PHP Library extension contains the class SplPriorityQueue.
Apple's Core Foundation framework contains a CFBinaryHeap structure, which implements a min-heap.
Applications.
Bandwidth management.
Priority queuing can be used to *management limited resources such as bandwidth on a transmission line from a network router. In the event of outgoing traffic queuing due to insufficient bandwidth, all other queues can be halted to send the traffic from the highest priority queue upon arrival. This ensures that the prioritized traffic (such as real-time traffic, e.g. an RTP stream of a VoIP connection) is forwarded with the least delay and the least likelihood of being rejected due to a queue reaching its maximum capacity. All other traffic can be handled when the highest priority queue is empty. Another approach used is to send disproportionately more traffic from higher priority queues.
Many modern protocols for local area networks also include the concept of priority queues at the media access control (MAC) sub-layer to ensure that high-priority applications (such as VoIP or IPTV) experience lower latency than other applications which can be served with best effort service. Examples include IEEE 802.11e (an amendment to IEEE 802.11 which provides quality of service) and ITU-T G.hn (a standard for high-speed local area network using existing home wiring (power lines, phone lines and coaxial cables).
Usually a limitation (policer) is set to limit the bandwidth that traffic from the highest priority queue can take, in order to prevent high priority packets from choking off all other traffic. This limit is usually never reached due to high level control instances such as the Cisco Callmanager, which can be programmed to inhibit calls which would exceed the programmed bandwidth limit.
Discrete event simulation.
Another use of a priority queue is to manage the events in a discrete event simulation. The events are added to the queue with their simulation time used as the priority. The execution of the simulation proceeds by repeatedly pulling the top of the queue and executing the event thereon.
"See also": Scheduling (computing), queueing theory
Dijkstra's algorithm.
When the graph is stored in the form of adjacency list or matrix, priority queue can be used to extract minimum efficiently when implementing Dijkstra's algorithm, although one also needs the ability to alter the priority of a particular vertex in the priority queue efficiently.
Huffman coding.
Huffman coding requires one to repeatedly obtain the two lowest-frequency trees. A priority queue is one method of doing this.
Best-first search algorithms.
Best-first search algorithms, like the A* search algorithm, find the shortest path between two vertices or nodes of a weighted graph, trying out the most promising routes first. A priority queue (also known as the "fringe") is used to keep track of unexplored routes; the one for which the estimate (a lower bound in the case of A*) of the total path length is smallest is given highest priority. If memory limitations make best-first search impractical, variants like the SMA* algorithm can be used instead, with a double-ended priority queue to allow removal of low-priority items.
ROAM triangulation algorithm.
The Real-time Optimally Adapting Meshes (ROAM) algorithm computes a dynamically changing triangulation of a terrain. It works by splitting triangles where more detail is needed and merging them where less detail is needed. The algorithm assigns each triangle in the terrain a priority, usually related to the error decrease if that triangle would be split. The algorithm uses two priority queues, one for triangles that can be split and another for triangles that can be merged. In each step the triangle from the split queue with the highest priority is split, or the triangle from the merge queue with the lowest priority is merged with its neighbours.
Prim's algorithm for minimum spanning tree.
Using min heap priority queue in Prim's algorithm to find the minimum spanning tree of a connected and undirected graph, one can achieve a good running time. This min heap priority queue uses the min heap data structure which supports operations such as "insert", "minimum", "extract-min", "decrease-key". In this implementation, the weight of the edges is used to decide the priority of the vertices. Lower the weight, higher the priority and higher the weight, lower the priority.
Parallel priority queue.
Parallelization can be used to speed up priority queues, but requires some changes to the priority queue interface. The reason for such changes is that a sequential update usually only has formula_2 or formula_3 cost, and there is no practical gain to parallelize such an operation. One possible change is to allow the concurrent access of multiple processors to the same priority queue. The second possible change is to allow batch operations that work on formula_4 elements, instead of just one element. For example, "extractMin" will remove the first formula_4 elements with the highest priority.
Concurrent parallel access.
If the priority queue allows concurrent access, multiple processes can perform operations concurrently on that priority queue. However, this raises two issues. First of all, the definition of the semantics of the individual operations is no longer obvious. For example, if two processes want to extract the element with the highest priority, should they get the same element or different ones? This restricts parallelism on the level of the program using the priority queue. In addition, because multiple processes have access to the same element, this leads to contention.
The concurrent access to a priority queue can be implemented on a Concurrent Read, Concurrent Write (CRCW) PRAM model. In the following the priority queue is implemented as a skip list. In addition, an atomic synchronization primitive, CAS, is used to make the skip list lock-free. The nodes of the skip list consists of a unique key, a priority, an array of pointers, for each level, to the next nodes and a "delete" mark. The "delete" mark marks if the node is about to be deleted by a process. This ensures that other processes can react to the deletion appropriately.
If the concurrent access to a priority queue is allowed, conflicts may arise between two processes. For example, a conflict arises if one process is trying to insert a new node, but at the same time another process is about to delete the predecessor of that node. There is a risk that the new node is added to the skip list, yet it is not longer reachable. ()
K-element operations.
In this setting, operations on a priority queue is generalized to a batch of formula_4 elements.
For instance, "k_extract-min" deletes the formula_4 smallest elements of the priority queue and returns those. 
In a shared-memory setting, the parallel priority queue can be easily implemented using parallel binary search trees and join-based tree algorithms. In particular, "k_extract-min" corresponds to a "split" on the binary search tree that has formula_3 cost and yields a tree that contains the formula_4 smallest elements. "k_insert" can be applied by a "union" of the original priority queue and the batch of insertions. If the batch is already sorted by the key, "k_insert" has formula_10 cost. Otherwise, we need to first sort the batch, so the cost will be formula_11. Other operations for priority queue can be applied similarly. For instance, "k_decrease-key" can be done by first applying "difference" and then "union", which first deletes the elements and then inserts them back with the updated keys. All these operations are highly parallel, and the theoretical and practical efficiency can be found in related research papers.
The rest of this section discusses a queue-based algorithm on distributed memory. We assume each processor has its own local memory and a local (sequential) priority queue. The elements of the global (parallel) priority queue are distributed across all processors.
A "k_insert" operation assigns the elements uniformly random to the processors which insert the elements into their local queues. Note that single elements can still be inserted into the queue. Using this strategy the global smallest elements are in the union of the local smallest elements of every processor with high probability. Thus each processor holds a representative part of the global priority queue.
This property is used when "k_extract-min" is executed, as the smallest formula_12 elements of each local queue are removed and collected in a result set. The elements in the result set are still associated with their original processor. The number of elements formula_12 that is removed from each local queue depends on formula_4 and the number of processors formula_15. 
By parallel selection the formula_4 smallest elements of the result set are determined. With high probability these are the global formula_4 smallest elements. If not, formula_12 elements are again removed from each local queue and put into the result set. This is done until the global formula_4 smallest elements are in the result set. Now these formula_4 elements can be returned. All other elements of the result set are inserted back into their local queues. The running time of "k_extract-min" is expected formula_21, where formula_22 and formula_23
is the size of the priority queue.
The priority queue can be further improved by not moving the remaining elements of the result set directly back into the local queues after a "k_extract-min" operation. This saves moving elements back and forth all the time between the result set and the local queues.
By removing several elements at once a considerable speedup can be reached. But not all algorithms can use this kind of priority queue. Dijkstra's algorithm for example can not work on several nodes at once. The algorithm takes the node with the smallest distance from the priority queue and calculates new distances for all its neighbor nodes. If you would take out formula_4 nodes, working at one node could change the distance of another one of the formula_4 nodes. So using k-element operations destroys the label setting property of Dijkstra's algorithm.

